# Generated by Django 2.2 on 2019-07-02 03:18

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('assetId', models.IntegerField()),
            ],
            options={
                'db_table': 'badge',
            },
        ),
        migrations.CreateModel(
            name='Power',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'power',
            },
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('distance', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'race',
            },
        ),
        migrations.CreateModel(
            name='RaceEventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(default='', max_length=100)),
            ],
            options={
                'db_table': 'raceeventtype',
            },
        ),
        migrations.CreateModel(
            name='RequestSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('ip', models.CharField(max_length=100)),
                ('success_count', models.IntegerField(default=0)),
                ('failure_count', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'requestsource',
            },
        ),
        migrations.CreateModel(
            name='RobloxUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('userId', models.IntegerField(unique=True)),
                ('username', models.CharField(max_length=30)),
                ('banLevel', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'robloxuser',
            },
        ),
        migrations.CreateModel(
            name='UserSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('first', models.BooleanField(default=0)),
                ('count', models.IntegerField(default=0)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usersources', to='terrainparkour.RequestSource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usersources', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'usersource',
            },
        ),
        migrations.CreateModel(
            name='UserReset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('z', models.FloatField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resets', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'userreset',
            },
        ),
        migrations.CreateModel(
            name='UserQuit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('z', models.FloatField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quits', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'userquit',
            },
        ),
        migrations.CreateModel(
            name='UserDied',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('z', models.FloatField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deaths', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'userdied',
            },
        ),
        migrations.CreateModel(
            name='TixTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('amount', models.IntegerField()),
                ('targetType', models.IntegerField()),
                ('targetId', models.IntegerField(blank=True, null=True)),
                ('transactionday', models.DateField(blank=True, default=None, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tixtransactions', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'tixtransaction',
            },
        ),
        migrations.CreateModel(
            name='Sign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('signId', models.IntegerField()),
                ('name', models.CharField(max_length=50)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('z', models.FloatField(blank=True, null=True)),
                ('calcFinds', models.IntegerField(default=0)),
                ('calcNearest', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nearest_to', to='terrainparkour.Sign')),
            ],
            options={
                'db_table': 'sign',
            },
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('place', models.IntegerField(default=0)),
                ('speed', models.FloatField(default=0)),
                ('raceMilliseconds', models.IntegerField()),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='terrainparkour.Race')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'run',
            },
        ),
        migrations.CreateModel(
            name='RaceEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(default='', max_length=100)),
                ('description', models.CharField(blank=True, default='', max_length=1000)),
                ('active', models.BooleanField(default=False)),
                ('startdate', models.DateTimeField(blank=True, null=True)),
                ('enddate', models.DateTimeField(blank=True, null=True)),
                ('badge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='raceevents', to='terrainparkour.Badge')),
                ('eventtype', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='terrainparkour.RaceEventType')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raceevents', to='terrainparkour.Race')),
            ],
            options={
                'db_table': 'raceevent',
            },
        ),
        migrations.AddField(
            model_name='race',
            name='end',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ends', to='terrainparkour.Sign'),
        ),
        migrations.AddField(
            model_name='race',
            name='start',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='starts', to='terrainparkour.Sign'),
        ),
        migrations.CreateModel(
            name='GameServerError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=100)),
                ('data', models.CharField(max_length=500)),
                ('message', models.CharField(max_length=500)),
                ('requestsource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gameservererrors', to='terrainparkour.RequestSource')),
            ],
            options={
                'db_table': 'gameservererror',
            },
        ),
        migrations.CreateModel(
            name='GameJoin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('length', models.IntegerField(default=0)),
                ('left', models.DateTimeField(default=datetime.datetime(1970, 1, 1, 0, 0))),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='joins', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'gamejoin',
            },
        ),
        migrations.CreateModel(
            name='Find',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('sign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='finds', to='terrainparkour.Sign')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='finds', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'find',
            },
        ),
        migrations.CreateModel(
            name='FailedSecurityAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('params', models.CharField(blank=True, max_length=250, null=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='failures', to='terrainparkour.RequestSource')),
            ],
            options={
                'db_table': 'failedsecurityattempt',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('rawtext', models.CharField(max_length=500)),
                ('filteredtext', models.CharField(max_length=500)),
                ('requestsource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatmessages', to='terrainparkour.RequestSource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatmessages', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'chatmessage',
            },
        ),
        migrations.CreateModel(
            name='BestRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('place', models.IntegerField(blank=True, null=True)),
                ('raceMilliseconds', models.IntegerField()),
                ('speed', models.FloatField(default=0)),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bestruns', to='terrainparkour.Race')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bestruns', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'bestrun',
            },
        ),
        migrations.CreateModel(
            name='BadgeGrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badgegrants', to='terrainparkour.Badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badgegrants', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'badgegrant',
            },
        ),
        migrations.CreateModel(
            name='ActionResultSent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('message', models.CharField(max_length=300)),
                ('notifyAllExcept', models.BooleanField()),
                ('notify', models.BooleanField()),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='actionresultssent', to='terrainparkour.RobloxUser')),
            ],
            options={
                'db_table': 'actionresultsent',
            },
        ),
    ]
